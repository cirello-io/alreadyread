// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package bookmarks

import (
	"sync"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
//	func TestSomethingThatUsesRepository(t *testing.T) {
//
//		// make and configure a mocked Repository
//		mockedRepository := &RepositoryMock{
//			AllFunc: func() ([]*Bookmark, error) {
//				panic("mock out the All method")
//			},
//			BootstrapFunc: func() error {
//				panic("mock out the Bootstrap method")
//			},
//			DeleteFunc: func(bookmark *Bookmark) error {
//				panic("mock out the Delete method")
//			},
//			ExpiredFunc: func() ([]*Bookmark, error) {
//				panic("mock out the Expired method")
//			},
//			GetByIDFunc: func(id int64) (*Bookmark, error) {
//				panic("mock out the GetByID method")
//			},
//			InsertFunc: func(bookmark *Bookmark) (*Bookmark, error) {
//				panic("mock out the Insert method")
//			},
//			InvalidFunc: func() ([]*Bookmark, error) {
//				panic("mock out the Invalid method")
//			},
//			UpdateFunc: func(bookmark *Bookmark) error {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedRepository in code that requires Repository
//		// and then make assertions.
//
//	}
type RepositoryMock struct {
	// AllFunc mocks the All method.
	AllFunc func() ([]*Bookmark, error)

	// BootstrapFunc mocks the Bootstrap method.
	BootstrapFunc func() error

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(bookmark *Bookmark) error

	// ExpiredFunc mocks the Expired method.
	ExpiredFunc func() ([]*Bookmark, error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(id int64) (*Bookmark, error)

	// InsertFunc mocks the Insert method.
	InsertFunc func(bookmark *Bookmark) (*Bookmark, error)

	// InvalidFunc mocks the Invalid method.
	InvalidFunc func() ([]*Bookmark, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(bookmark *Bookmark) error

	// calls tracks calls to the methods.
	calls struct {
		// All holds details about calls to the All method.
		All []struct {
		}
		// Bootstrap holds details about calls to the Bootstrap method.
		Bootstrap []struct {
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Bookmark is the bookmark argument value.
			Bookmark *Bookmark
		}
		// Expired holds details about calls to the Expired method.
		Expired []struct {
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// ID is the id argument value.
			ID int64
		}
		// Insert holds details about calls to the Insert method.
		Insert []struct {
			// Bookmark is the bookmark argument value.
			Bookmark *Bookmark
		}
		// Invalid holds details about calls to the Invalid method.
		Invalid []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Bookmark is the bookmark argument value.
			Bookmark *Bookmark
		}
	}
	lockAll       sync.RWMutex
	lockBootstrap sync.RWMutex
	lockDelete    sync.RWMutex
	lockExpired   sync.RWMutex
	lockGetByID   sync.RWMutex
	lockInsert    sync.RWMutex
	lockInvalid   sync.RWMutex
	lockUpdate    sync.RWMutex
}

// All calls AllFunc.
func (mock *RepositoryMock) All() ([]*Bookmark, error) {
	if mock.AllFunc == nil {
		panic("RepositoryMock.AllFunc: method is nil but Repository.All was just called")
	}
	callInfo := struct {
	}{}
	mock.lockAll.Lock()
	mock.calls.All = append(mock.calls.All, callInfo)
	mock.lockAll.Unlock()
	return mock.AllFunc()
}

// AllCalls gets all the calls that were made to All.
// Check the length with:
//
//	len(mockedRepository.AllCalls())
func (mock *RepositoryMock) AllCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockAll.RLock()
	calls = mock.calls.All
	mock.lockAll.RUnlock()
	return calls
}

// Bootstrap calls BootstrapFunc.
func (mock *RepositoryMock) Bootstrap() error {
	if mock.BootstrapFunc == nil {
		panic("RepositoryMock.BootstrapFunc: method is nil but Repository.Bootstrap was just called")
	}
	callInfo := struct {
	}{}
	mock.lockBootstrap.Lock()
	mock.calls.Bootstrap = append(mock.calls.Bootstrap, callInfo)
	mock.lockBootstrap.Unlock()
	return mock.BootstrapFunc()
}

// BootstrapCalls gets all the calls that were made to Bootstrap.
// Check the length with:
//
//	len(mockedRepository.BootstrapCalls())
func (mock *RepositoryMock) BootstrapCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockBootstrap.RLock()
	calls = mock.calls.Bootstrap
	mock.lockBootstrap.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *RepositoryMock) Delete(bookmark *Bookmark) error {
	if mock.DeleteFunc == nil {
		panic("RepositoryMock.DeleteFunc: method is nil but Repository.Delete was just called")
	}
	callInfo := struct {
		Bookmark *Bookmark
	}{
		Bookmark: bookmark,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(bookmark)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//
//	len(mockedRepository.DeleteCalls())
func (mock *RepositoryMock) DeleteCalls() []struct {
	Bookmark *Bookmark
} {
	var calls []struct {
		Bookmark *Bookmark
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Expired calls ExpiredFunc.
func (mock *RepositoryMock) Expired() ([]*Bookmark, error) {
	if mock.ExpiredFunc == nil {
		panic("RepositoryMock.ExpiredFunc: method is nil but Repository.Expired was just called")
	}
	callInfo := struct {
	}{}
	mock.lockExpired.Lock()
	mock.calls.Expired = append(mock.calls.Expired, callInfo)
	mock.lockExpired.Unlock()
	return mock.ExpiredFunc()
}

// ExpiredCalls gets all the calls that were made to Expired.
// Check the length with:
//
//	len(mockedRepository.ExpiredCalls())
func (mock *RepositoryMock) ExpiredCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockExpired.RLock()
	calls = mock.calls.Expired
	mock.lockExpired.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *RepositoryMock) GetByID(id int64) (*Bookmark, error) {
	if mock.GetByIDFunc == nil {
		panic("RepositoryMock.GetByIDFunc: method is nil but Repository.GetByID was just called")
	}
	callInfo := struct {
		ID int64
	}{
		ID: id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedRepository.GetByIDCalls())
func (mock *RepositoryMock) GetByIDCalls() []struct {
	ID int64
} {
	var calls []struct {
		ID int64
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// Insert calls InsertFunc.
func (mock *RepositoryMock) Insert(bookmark *Bookmark) (*Bookmark, error) {
	if mock.InsertFunc == nil {
		panic("RepositoryMock.InsertFunc: method is nil but Repository.Insert was just called")
	}
	callInfo := struct {
		Bookmark *Bookmark
	}{
		Bookmark: bookmark,
	}
	mock.lockInsert.Lock()
	mock.calls.Insert = append(mock.calls.Insert, callInfo)
	mock.lockInsert.Unlock()
	return mock.InsertFunc(bookmark)
}

// InsertCalls gets all the calls that were made to Insert.
// Check the length with:
//
//	len(mockedRepository.InsertCalls())
func (mock *RepositoryMock) InsertCalls() []struct {
	Bookmark *Bookmark
} {
	var calls []struct {
		Bookmark *Bookmark
	}
	mock.lockInsert.RLock()
	calls = mock.calls.Insert
	mock.lockInsert.RUnlock()
	return calls
}

// Invalid calls InvalidFunc.
func (mock *RepositoryMock) Invalid() ([]*Bookmark, error) {
	if mock.InvalidFunc == nil {
		panic("RepositoryMock.InvalidFunc: method is nil but Repository.Invalid was just called")
	}
	callInfo := struct {
	}{}
	mock.lockInvalid.Lock()
	mock.calls.Invalid = append(mock.calls.Invalid, callInfo)
	mock.lockInvalid.Unlock()
	return mock.InvalidFunc()
}

// InvalidCalls gets all the calls that were made to Invalid.
// Check the length with:
//
//	len(mockedRepository.InvalidCalls())
func (mock *RepositoryMock) InvalidCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockInvalid.RLock()
	calls = mock.calls.Invalid
	mock.lockInvalid.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *RepositoryMock) Update(bookmark *Bookmark) error {
	if mock.UpdateFunc == nil {
		panic("RepositoryMock.UpdateFunc: method is nil but Repository.Update was just called")
	}
	callInfo := struct {
		Bookmark *Bookmark
	}{
		Bookmark: bookmark,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(bookmark)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedRepository.UpdateCalls())
func (mock *RepositoryMock) UpdateCalls() []struct {
	Bookmark *Bookmark
} {
	var calls []struct {
		Bookmark *Bookmark
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package bookmarks

import (
	"sync"
)

// Ensure, that URLCheckerMock does implement URLChecker.
// If this is not the case, regenerate this file with moq.
var _ URLChecker = &URLCheckerMock{}

// URLCheckerMock is a mock implementation of URLChecker.
//
//	func TestSomethingThatUsesURLChecker(t *testing.T) {
//
//		// make and configure a mocked URLChecker
//		mockedURLChecker := &URLCheckerMock{
//			CheckFunc: func(bookmark *Bookmark) *Bookmark {
//				panic("mock out the Check method")
//			},
//		}
//
//		// use mockedURLChecker in code that requires URLChecker
//		// and then make assertions.
//
//	}
type URLCheckerMock struct {
	// CheckFunc mocks the Check method.
	CheckFunc func(bookmark *Bookmark) *Bookmark

	// calls tracks calls to the methods.
	calls struct {
		// Check holds details about calls to the Check method.
		Check []struct {
			// Bookmark is the bookmark argument value.
			Bookmark *Bookmark
		}
	}
	lockCheck sync.RWMutex
}

// Check calls CheckFunc.
func (mock *URLCheckerMock) Check(bookmark *Bookmark) *Bookmark {
	if mock.CheckFunc == nil {
		panic("URLCheckerMock.CheckFunc: method is nil but URLChecker.Check was just called")
	}
	callInfo := struct {
		Bookmark *Bookmark
	}{
		Bookmark: bookmark,
	}
	mock.lockCheck.Lock()
	mock.calls.Check = append(mock.calls.Check, callInfo)
	mock.lockCheck.Unlock()
	return mock.CheckFunc(bookmark)
}

// CheckCalls gets all the calls that were made to Check.
// Check the length with:
//
//	len(mockedURLChecker.CheckCalls())
func (mock *URLCheckerMock) CheckCalls() []struct {
	Bookmark *Bookmark
} {
	var calls []struct {
		Bookmark *Bookmark
	}
	mock.lockCheck.RLock()
	calls = mock.calls.Check
	mock.lockCheck.RUnlock()
	return calls
}

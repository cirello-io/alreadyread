// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package web

import (
	"sync"
)

// Ensure, that URLTitleLoaderMock does implement URLTitleLoader.
// If this is not the case, regenerate this file with moq.
var _ URLTitleLoader = &URLTitleLoaderMock{}

// URLTitleLoaderMock is a mock implementation of URLTitleLoader.
//
//	func TestSomethingThatUsesURLTitleLoader(t *testing.T) {
//
//		// make and configure a mocked URLTitleLoader
//		mockedURLTitleLoader := &URLTitleLoaderMock{
//			TitleFunc: func(url string) string {
//				panic("mock out the Title method")
//			},
//		}
//
//		// use mockedURLTitleLoader in code that requires URLTitleLoader
//		// and then make assertions.
//
//	}
type URLTitleLoaderMock struct {
	// TitleFunc mocks the Title method.
	TitleFunc func(url string) string

	// calls tracks calls to the methods.
	calls struct {
		// Title holds details about calls to the Title method.
		Title []struct {
			// URL is the url argument value.
			URL string
		}
	}
	lockTitle sync.RWMutex
}

// Title calls TitleFunc.
func (mock *URLTitleLoaderMock) Title(url string) string {
	if mock.TitleFunc == nil {
		panic("URLTitleLoaderMock.TitleFunc: method is nil but URLTitleLoader.Title was just called")
	}
	callInfo := struct {
		URL string
	}{
		URL: url,
	}
	mock.lockTitle.Lock()
	mock.calls.Title = append(mock.calls.Title, callInfo)
	mock.lockTitle.Unlock()
	return mock.TitleFunc(url)
}

// TitleCalls gets all the calls that were made to Title.
// Check the length with:
//
//	len(mockedURLTitleLoader.TitleCalls())
func (mock *URLTitleLoaderMock) TitleCalls() []struct {
	URL string
} {
	var calls []struct {
		URL string
	}
	mock.lockTitle.RLock()
	calls = mock.calls.Title
	mock.lockTitle.RUnlock()
	return calls
}
